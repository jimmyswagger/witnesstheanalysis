

xg <- read.csv(file="c:/Users/donagh/OneDrive/Spreadsheet fun/PA Analytics/PA Template/xg.csv", header=TRUE, sep=";")
attach (xg)

xg <- xg %>% filter (mainoc == "Shot Op Oc")

xg <- xg %>%mutate (scr = ifelse (subsetoc=="Scr Op",1,0))

xg 


xgtrain <- xg %>% filter (gameid %in% c("1", "2","3")) %>%select(gameid, shot_type, Shot_Dist, shdf, scr)
xgtest <- xg %>% filter (gameid %in% c("4"))

xGmodel <- glm(scr ~ poly(Shot_Dist, 3, raw = TRUE) +  shot_type +  
shdf,  data = xgtrain, family = binomial(link = 'logit'))



xgtest <- predict(xGmodel, xgtest, type = "response")


xgtest$xG <- predict(xGmodel, xgtest, type = "response")

avg_xG_by_coord <- xgtest %>% group_by(Areax,Areay) %>%summarise(xg = mean(xG)) 

ggplot(avg_xG_by_coord, aes(Areax, Areay, fill = xg)) + geom_raster() +     
scale_fill_gradient(low = 'blue', high = 'red')+ geom_vline(xintercept = 0, color = 'red') +     
geom_vline(xintercept = 25, color = 'blue') + geom_vline(xintercept = 88, color = 'red') +     
xlab('X Coordinates') + ylab('Y Coordinates') + labs(title = 'Average xG Value by Coordinate')


------------------

#ind.vars = c("plyshot","shot_type","Shot_Dist","vec","shdf")

ind.vars = c("gameid","id","plyshot","shot_type","Shot_Dist", "scr")

shots.varsdata = subset(xg, select = ind.vars)



#splitting into test train
idx = createDataPartition(shots.varsdata$scr, p = 0.8, list = F)
train = shots.varsdata[idx,]
test = shots.varsdata[-idx,]

training_xg = shots.varsdata$shot_type[idx]
test_xg = subset(xg, select = c(ind.vars, 'shot_type')) %>% drop_na() %>% select(-ind.vars) %>% slice(-idx)


library(doParallel)
cl = makePSOCKcluster(5)
registerDoParallel(cl)

vars = ncol(model.matrix(scr ~ ., train[,!colnames(train) %in% c("id")])) - 2
grid = expand.grid(mtry = 4:vars)

control = trainControl(classProbs = TRUE, method = "cv", number = 5,
                       allowParallel = T,summaryFunction = prSummary, savePredictions = T)

rf.1 = caret::train(scr ~ .,
                    data = train[,!colnames(train) %in% c("id")], 
                    method = "rf",
                    metric = "F",
                    trControl = control,
                    tuneGrid = grid,
                    preProcess = c("center", "scale"))

xG_test.rf.v1 = predict(rf.1, test, type = "prob")