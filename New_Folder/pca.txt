https://thearcfooty.com/2016/10/15/classifying-players-positions-using-public-data/

pass <- read.csv(file="c:/Users/donag/OneDrive/Spreadsheet fun/PA Analytics/PA Template/newplan/passnewplan.csv", header=TRUE, sep=";")
attach (pass)

#Filter and sum data  - probably by pitch area y bind the results 

passDef <- pass %>%group_by(Player)%>%filter (Areax < 44.9)
plystats <- passDef %>%group_by(Player)%>%summarize(PW =sum(main == "PW"),Pass =sum(main == "Pass Op"),Rec =sum(main == "Rec Op"),OpShot =sum(main == "Shot Op"),Poss_Lost =sum(main == "ToL"),Fk_Won =sum(main == "Free Won"),Fk_Lost =sum(main == "Free Loss"),Spoils =sum(main == "Def Act"))
 
#z scores 
#dat <-  plystats%>%
    #as_tibble() %>% 
    #mutate_at(c("PW","Pass","Rec","OpShot","Poss_Lost","Fk_Won","Fk_Lost","Spoils"), list(z = ~as.vector(scale(.))))


#plystatsAll <- dat %>%select ( PW_z,  Pass_z ,  Rec_z, OpShot_z, Poss_Lost_z, Fk_Won_z, Fk_Lost_z, Spoils_z)

plystatsAll <- dat %>%select ( PW,  Pass ,  Rec, Poss_Lost, Spoils)

-----
#gap stat
fviz_nbclust(plystatsAll, kmeans,
             method = "gap_stat")

#kmeans cluster
km.res <- kmeans(plystatsAll, 4, nstart = 25)

# kmeans Visualize
fviz_cluster(km.res, data = plystatsAll, 
             ellipse.type = "convex",
             palette = "jco",
             repel = TRUE,
             ggtheme = theme_minimal())

#pam cluster
pam.res <- pam(plystatsAll, 4)
# Visualize
fviz_cluster(pam.res)


#Bar chart - Need to filter by clustered player groups and the average 
q <- ggplot(data = plystatsAll, aes(x = Player, y = OpShot_z, fill = Player))

q +geom_bar(width=.7, stat = "identity", aes(x =  Player, y = OpShot_z, fill = Player), position = "dodge") 

#PCA
res.pca <- prcomp(statsA, scale = TRUE)


fviz_pca_biplot(res.pca, repel = TRUE,
                col.var = "#2E9FDF", # Variables color
                col.ind = "#696969"  # Individuals color
                )

#PCA
fviz_eig(res.pca)


fviz_pca_ind(res.pca,
             col.ind = "cos2", # Color by the quality of representation
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE     # Avoid text overlapping
             )


